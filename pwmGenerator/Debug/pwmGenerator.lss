
pwmGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000820  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20400000  20400000  00010820  2**0
                  CONTENTS
  2 .bss          00000048  20400000  20400000  00020000  2**2
                  ALLOC
  3 .heap         00000200  20400048  20400048  00020000  2**0
                  ALLOC
  4 .stack        00000400  20400248  20400248  00020000  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00010820  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0001084e  2**0
                  CONTENTS, READONLY
  7 .debug_info   000062d6  00000000  00000000  000108a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001088  00000000  00000000  00016b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001353  00000000  00000000  00017c05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000228  00000000  00000000  00018f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  00019180  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000372ac  00000000  00000000  00019308  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000078d1  00000000  00000000  000505b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0012591d  00000000  00000000  00057e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000438  00000000  00000000  0017d7a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 06 40 20 d1 01 40 00 cd 01 40 00 cd 01 40 00     H.@ ..@...@...@.
  400010:	cd 01 40 00 cd 01 40 00 cd 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	cd 01 40 00 cd 01 40 00 00 00 00 00 cd 01 40 00     ..@...@.......@.
  40003c:	cd 01 40 00 cd 01 40 00 cd 01 40 00 cd 01 40 00     ..@...@...@...@.
  40004c:	cd 01 40 00 cd 01 40 00 cd 01 40 00 cd 01 40 00     ..@...@...@...@.
  40005c:	cd 01 40 00 cd 01 40 00 00 00 00 00 cd 01 40 00     ..@...@.......@.
  40006c:	cd 01 40 00 cd 01 40 00 cd 01 40 00 cd 01 40 00     ..@...@...@...@.
  40007c:	cd 01 40 00 cd 01 40 00 cd 01 40 00 cd 01 40 00     ..@...@...@...@.
  40008c:	cd 01 40 00 cd 01 40 00 cd 01 40 00 cd 01 40 00     ..@...@...@...@.
  40009c:	cd 01 40 00 cd 01 40 00 cd 01 40 00 cd 01 40 00     ..@...@...@...@.
  4000ac:	cd 01 40 00 cd 01 40 00 cd 01 40 00 cd 01 40 00     ..@...@...@...@.
  4000bc:	2d 05 40 00 cd 01 40 00 cd 01 40 00 cd 01 40 00     -.@...@...@...@.
  4000cc:	cd 01 40 00 cd 01 40 00 cd 01 40 00 cd 01 40 00     ..@...@...@...@.
  4000dc:	cd 01 40 00 cd 01 40 00 cd 01 40 00 cd 01 40 00     ..@...@...@...@.
  4000ec:	cd 01 40 00 cd 01 40 00 cd 01 40 00 cd 01 40 00     ..@...@...@...@.
  4000fc:	cd 01 40 00 cd 01 40 00 cd 01 40 00 cd 01 40 00     ..@...@...@...@.
  40010c:	cd 01 40 00 cd 01 40 00 cd 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 cd 01 40 00 cd 01 40 00 cd 01 40 00     ......@...@...@.
  40012c:	cd 01 40 00 cd 01 40 00 cd 01 40 00 cd 01 40 00     ..@...@...@...@.
  40013c:	cd 01 40 00 00 00 00 00 00 00 00 00 cd 01 40 00     ..@...........@.
  40014c:	cd 01 40 00 cd 01 40 00                             ..@...@.

00400154 <__do_global_dtors_aux>:
  400154:	b510      	push	{r4, lr}
  400156:	4c05      	ldr	r4, [pc, #20]	; (40016c <__do_global_dtors_aux+0x18>)
  400158:	7823      	ldrb	r3, [r4, #0]
  40015a:	b933      	cbnz	r3, 40016a <__do_global_dtors_aux+0x16>
  40015c:	4b04      	ldr	r3, [pc, #16]	; (400170 <__do_global_dtors_aux+0x1c>)
  40015e:	b113      	cbz	r3, 400166 <__do_global_dtors_aux+0x12>
  400160:	4804      	ldr	r0, [pc, #16]	; (400174 <__do_global_dtors_aux+0x20>)
  400162:	f3af 8000 	nop.w
  400166:	2301      	movs	r3, #1
  400168:	7023      	strb	r3, [r4, #0]
  40016a:	bd10      	pop	{r4, pc}
  40016c:	20400000 	.word	0x20400000
  400170:	00000000 	.word	0x00000000
  400174:	00400820 	.word	0x00400820

00400178 <frame_dummy>:
  400178:	4b0c      	ldr	r3, [pc, #48]	; (4001ac <frame_dummy+0x34>)
  40017a:	b143      	cbz	r3, 40018e <frame_dummy+0x16>
  40017c:	480c      	ldr	r0, [pc, #48]	; (4001b0 <frame_dummy+0x38>)
  40017e:	490d      	ldr	r1, [pc, #52]	; (4001b4 <frame_dummy+0x3c>)
  400180:	b510      	push	{r4, lr}
  400182:	f3af 8000 	nop.w
  400186:	480c      	ldr	r0, [pc, #48]	; (4001b8 <frame_dummy+0x40>)
  400188:	6803      	ldr	r3, [r0, #0]
  40018a:	b923      	cbnz	r3, 400196 <frame_dummy+0x1e>
  40018c:	bd10      	pop	{r4, pc}
  40018e:	480a      	ldr	r0, [pc, #40]	; (4001b8 <frame_dummy+0x40>)
  400190:	6803      	ldr	r3, [r0, #0]
  400192:	b933      	cbnz	r3, 4001a2 <frame_dummy+0x2a>
  400194:	4770      	bx	lr
  400196:	4b09      	ldr	r3, [pc, #36]	; (4001bc <frame_dummy+0x44>)
  400198:	2b00      	cmp	r3, #0
  40019a:	d0f7      	beq.n	40018c <frame_dummy+0x14>
  40019c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001a0:	4718      	bx	r3
  4001a2:	4b06      	ldr	r3, [pc, #24]	; (4001bc <frame_dummy+0x44>)
  4001a4:	2b00      	cmp	r3, #0
  4001a6:	d0f5      	beq.n	400194 <frame_dummy+0x1c>
  4001a8:	4718      	bx	r3
  4001aa:	bf00      	nop
  4001ac:	00000000 	.word	0x00000000
  4001b0:	00400820 	.word	0x00400820
  4001b4:	20400004 	.word	0x20400004
  4001b8:	00400820 	.word	0x00400820
  4001bc:	00000000 	.word	0x00000000

004001c0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001c0:	b508      	push	{r3, lr}
	system_init();
  4001c2:	4b01      	ldr	r3, [pc, #4]	; (4001c8 <atmel_start_init+0x8>)
  4001c4:	4798      	blx	r3
  4001c6:	bd08      	pop	{r3, pc}
  4001c8:	004002f9 	.word	0x004002f9

004001cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001cc:	e7fe      	b.n	4001cc <Dummy_Handler>
	...

004001d0 <Reset_Handler>:
{
  4001d0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001d2:	4b10      	ldr	r3, [pc, #64]	; (400214 <Reset_Handler+0x44>)
  4001d4:	4a10      	ldr	r2, [pc, #64]	; (400218 <Reset_Handler+0x48>)
  4001d6:	429a      	cmp	r2, r3
  4001d8:	d009      	beq.n	4001ee <Reset_Handler+0x1e>
  4001da:	4b0e      	ldr	r3, [pc, #56]	; (400214 <Reset_Handler+0x44>)
  4001dc:	4a0e      	ldr	r2, [pc, #56]	; (400218 <Reset_Handler+0x48>)
  4001de:	e003      	b.n	4001e8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001e0:	6811      	ldr	r1, [r2, #0]
  4001e2:	6019      	str	r1, [r3, #0]
  4001e4:	3304      	adds	r3, #4
  4001e6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4001e8:	490c      	ldr	r1, [pc, #48]	; (40021c <Reset_Handler+0x4c>)
  4001ea:	428b      	cmp	r3, r1
  4001ec:	d3f8      	bcc.n	4001e0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  4001ee:	4b0c      	ldr	r3, [pc, #48]	; (400220 <Reset_Handler+0x50>)
  4001f0:	e002      	b.n	4001f8 <Reset_Handler+0x28>
                *pDest++ = 0;
  4001f2:	2200      	movs	r2, #0
  4001f4:	601a      	str	r2, [r3, #0]
  4001f6:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4001f8:	4a0a      	ldr	r2, [pc, #40]	; (400224 <Reset_Handler+0x54>)
  4001fa:	4293      	cmp	r3, r2
  4001fc:	d3f9      	bcc.n	4001f2 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4001fe:	4a0a      	ldr	r2, [pc, #40]	; (400228 <Reset_Handler+0x58>)
  400200:	4b0a      	ldr	r3, [pc, #40]	; (40022c <Reset_Handler+0x5c>)
  400202:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400206:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400208:	4b09      	ldr	r3, [pc, #36]	; (400230 <Reset_Handler+0x60>)
  40020a:	4798      	blx	r3
        main();
  40020c:	4b09      	ldr	r3, [pc, #36]	; (400234 <Reset_Handler+0x64>)
  40020e:	4798      	blx	r3
  400210:	e7fe      	b.n	400210 <Reset_Handler+0x40>
  400212:	bf00      	nop
  400214:	20400000 	.word	0x20400000
  400218:	00400820 	.word	0x00400820
  40021c:	20400000 	.word	0x20400000
  400220:	20400000 	.word	0x20400000
  400224:	20400048 	.word	0x20400048
  400228:	e000ed00 	.word	0xe000ed00
  40022c:	00400000 	.word	0x00400000
  400230:	0040070d 	.word	0x0040070d
  400234:	004006f1 	.word	0x004006f1

00400238 <PWM_0_PORT_init>:
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400238:	4a19      	ldr	r2, [pc, #100]	; (4002a0 <PWM_0_PORT_init+0x68>)
  40023a:	6f13      	ldr	r3, [r2, #112]	; 0x70
  40023c:	f023 0301 	bic.w	r3, r3, #1
  400240:	6713      	str	r3, [r2, #112]	; 0x70
  400242:	6f53      	ldr	r3, [r2, #116]	; 0x74
  400244:	f023 0301 	bic.w	r3, r3, #1
  400248:	6753      	str	r3, [r2, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40024a:	2301      	movs	r3, #1
  40024c:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40024e:	4b15      	ldr	r3, [pc, #84]	; (4002a4 <PWM_0_PORT_init+0x6c>)
  400250:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400252:	f021 0102 	bic.w	r1, r1, #2
  400256:	6719      	str	r1, [r3, #112]	; 0x70
  400258:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40025a:	f021 0102 	bic.w	r1, r1, #2
  40025e:	6759      	str	r1, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400260:	2102      	movs	r1, #2
  400262:	6059      	str	r1, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400264:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400266:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40026a:	6711      	str	r1, [r2, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40026c:	6f51      	ldr	r1, [r2, #116]	; 0x74
  40026e:	f421 2100 	bic.w	r1, r1, #524288	; 0x80000
  400272:	6751      	str	r1, [r2, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400274:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400278:	6051      	str	r1, [r2, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  40027a:	490b      	ldr	r1, [pc, #44]	; (4002a8 <PWM_0_PORT_init+0x70>)
  40027c:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
  400280:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400284:	f8c1 2114 	str.w	r2, [r1, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400288:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40028a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40028e:	671a      	str	r2, [r3, #112]	; 0x70
  400290:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400292:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  400296:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400298:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40029c:	605a      	str	r2, [r3, #4]
  40029e:	4770      	bx	lr
  4002a0:	400e0e00 	.word	0x400e0e00
  4002a4:	400e1000 	.word	0x400e1000
  4002a8:	40088000 	.word	0x40088000

004002ac <PWM_0_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002ac:	4b04      	ldr	r3, [pc, #16]	; (4002c0 <PWM_0_CLOCK_init+0x14>)
  4002ae:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4002b0:	2b00      	cmp	r3, #0
  4002b2:	db03      	blt.n	4002bc <PWM_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4002b8:	4b01      	ldr	r3, [pc, #4]	; (4002c0 <PWM_0_CLOCK_init+0x14>)
  4002ba:	611a      	str	r2, [r3, #16]
  4002bc:	4770      	bx	lr
  4002be:	bf00      	nop
  4002c0:	400e0600 	.word	0x400e0600

004002c4 <PWM_0_init>:
{
	_pmc_enable_periph_clock(ID_PWM0);
}

void PWM_0_init(void)
{
  4002c4:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
  4002c6:	4b06      	ldr	r3, [pc, #24]	; (4002e0 <PWM_0_init+0x1c>)
  4002c8:	4798      	blx	r3
	PWM_0_PORT_init();
  4002ca:	4b06      	ldr	r3, [pc, #24]	; (4002e4 <PWM_0_init+0x20>)
  4002cc:	4798      	blx	r3
	pwm_init(&PWM_0, PWM0, _pwm_get_pwm());
  4002ce:	4b06      	ldr	r3, [pc, #24]	; (4002e8 <PWM_0_init+0x24>)
  4002d0:	4798      	blx	r3
  4002d2:	4602      	mov	r2, r0
  4002d4:	4905      	ldr	r1, [pc, #20]	; (4002ec <PWM_0_init+0x28>)
  4002d6:	4806      	ldr	r0, [pc, #24]	; (4002f0 <PWM_0_init+0x2c>)
  4002d8:	4b06      	ldr	r3, [pc, #24]	; (4002f4 <PWM_0_init+0x30>)
  4002da:	4798      	blx	r3
  4002dc:	bd08      	pop	{r3, pc}
  4002de:	bf00      	nop
  4002e0:	004002ad 	.word	0x004002ad
  4002e4:	00400239 	.word	0x00400239
  4002e8:	004006ed 	.word	0x004006ed
  4002ec:	40020000 	.word	0x40020000
  4002f0:	2040002c 	.word	0x2040002c
  4002f4:	0040034d 	.word	0x0040034d

004002f8 <system_init>:
}

void system_init(void)
{
  4002f8:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4002fa:	4b05      	ldr	r3, [pc, #20]	; (400310 <system_init+0x18>)
  4002fc:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  4002fe:	4a05      	ldr	r2, [pc, #20]	; (400314 <system_init+0x1c>)
  400300:	6853      	ldr	r3, [r2, #4]
  400302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400306:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	PWM_0_init();
  400308:	4b03      	ldr	r3, [pc, #12]	; (400318 <system_init+0x20>)
  40030a:	4798      	blx	r3
  40030c:	bd08      	pop	{r3, pc}
  40030e:	bf00      	nop
  400310:	004003d5 	.word	0x004003d5
  400314:	400e1850 	.word	0x400e1850
  400318:	004002c5 	.word	0x004002c5

0040031c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40031c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400320:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400322:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400324:	f3bf 8f5f 	dmb	sy
  400328:	4770      	bx	lr

0040032a <atomic_leave_critical>:
  40032a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  40032e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400330:	f383 8810 	msr	PRIMASK, r3
  400334:	4770      	bx	lr

00400336 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
  400336:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
  400338:	6943      	ldr	r3, [r0, #20]
  40033a:	b103      	cbz	r3, 40033e <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
  40033c:	4798      	blx	r3
  40033e:	bd08      	pop	{r3, pc}

00400340 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
  400340:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
  400342:	6983      	ldr	r3, [r0, #24]
  400344:	b103      	cbz	r3, 400348 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
  400346:	4798      	blx	r3
  400348:	bd08      	pop	{r3, pc}
	...

0040034c <pwm_init>:
{
  40034c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40034e:	4604      	mov	r4, r0
  400350:	460d      	mov	r5, r1
  400352:	2800      	cmp	r0, #0
  400354:	bf18      	it	ne
  400356:	2900      	cmpne	r1, #0
  400358:	bf14      	ite	ne
  40035a:	2001      	movne	r0, #1
  40035c:	2000      	moveq	r0, #0
  40035e:	2233      	movs	r2, #51	; 0x33
  400360:	4906      	ldr	r1, [pc, #24]	; (40037c <pwm_init+0x30>)
  400362:	4b07      	ldr	r3, [pc, #28]	; (400380 <pwm_init+0x34>)
  400364:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
  400366:	4629      	mov	r1, r5
  400368:	4620      	mov	r0, r4
  40036a:	4b06      	ldr	r3, [pc, #24]	; (400384 <pwm_init+0x38>)
  40036c:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
  40036e:	4b06      	ldr	r3, [pc, #24]	; (400388 <pwm_init+0x3c>)
  400370:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
  400372:	4b06      	ldr	r3, [pc, #24]	; (40038c <pwm_init+0x40>)
  400374:	6063      	str	r3, [r4, #4]
}
  400376:	2000      	movs	r0, #0
  400378:	bd38      	pop	{r3, r4, r5, pc}
  40037a:	bf00      	nop
  40037c:	00400754 	.word	0x00400754
  400380:	004003cd 	.word	0x004003cd
  400384:	00400541 	.word	0x00400541
  400388:	00400337 	.word	0x00400337
  40038c:	00400341 	.word	0x00400341

00400390 <pwm_enable>:
{
  400390:	b510      	push	{r4, lr}
	ASSERT(descr);
  400392:	4604      	mov	r4, r0
  400394:	224a      	movs	r2, #74	; 0x4a
  400396:	4909      	ldr	r1, [pc, #36]	; (4003bc <pwm_enable+0x2c>)
  400398:	3000      	adds	r0, #0
  40039a:	bf18      	it	ne
  40039c:	2001      	movne	r0, #1
  40039e:	4b08      	ldr	r3, [pc, #32]	; (4003c0 <pwm_enable+0x30>)
  4003a0:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
  4003a2:	4620      	mov	r0, r4
  4003a4:	4b07      	ldr	r3, [pc, #28]	; (4003c4 <pwm_enable+0x34>)
  4003a6:	4798      	blx	r3
  4003a8:	b920      	cbnz	r0, 4003b4 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
  4003aa:	4620      	mov	r0, r4
  4003ac:	4b06      	ldr	r3, [pc, #24]	; (4003c8 <pwm_enable+0x38>)
  4003ae:	4798      	blx	r3
	return ERR_NONE;
  4003b0:	2000      	movs	r0, #0
  4003b2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  4003b4:	f06f 0010 	mvn.w	r0, #16
}
  4003b8:	bd10      	pop	{r4, pc}
  4003ba:	bf00      	nop
  4003bc:	00400754 	.word	0x00400754
  4003c0:	004003cd 	.word	0x004003cd
  4003c4:	004006bd 	.word	0x004006bd
  4003c8:	00400679 	.word	0x00400679

004003cc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  4003cc:	b900      	cbnz	r0, 4003d0 <assert+0x4>
		__asm("BKPT #0");
  4003ce:	be00      	bkpt	0x0000
  4003d0:	4770      	bx	lr
	...

004003d4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  4003d4:	b500      	push	{lr}
  4003d6:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  4003d8:	a801      	add	r0, sp, #4
  4003da:	4b0e      	ldr	r3, [pc, #56]	; (400414 <_init_chip+0x40>)
  4003dc:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4003de:	4a0e      	ldr	r2, [pc, #56]	; (400418 <_init_chip+0x44>)
  4003e0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  4003e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4003e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  4003ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003f0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  4003f4:	a801      	add	r0, sp, #4
  4003f6:	4b09      	ldr	r3, [pc, #36]	; (40041c <_init_chip+0x48>)
  4003f8:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  4003fa:	4a09      	ldr	r2, [pc, #36]	; (400420 <_init_chip+0x4c>)
  4003fc:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  4003fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400402:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400406:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400408:	4b06      	ldr	r3, [pc, #24]	; (400424 <_init_chip+0x50>)
  40040a:	4798      	blx	r3
}
  40040c:	b003      	add	sp, #12
  40040e:	f85d fb04 	ldr.w	pc, [sp], #4
  400412:	bf00      	nop
  400414:	0040031d 	.word	0x0040031d
  400418:	e000ed00 	.word	0xe000ed00
  40041c:	0040032b 	.word	0x0040032b
  400420:	400e0c00 	.word	0x400e0c00
  400424:	004004c5 	.word	0x004004c5

00400428 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400428:	490e      	ldr	r1, [pc, #56]	; (400464 <_pmc_init_sources+0x3c>)
  40042a:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  40042c:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400430:	4b0d      	ldr	r3, [pc, #52]	; (400468 <_pmc_init_sources+0x40>)
  400432:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400434:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400436:	4b0b      	ldr	r3, [pc, #44]	; (400464 <_pmc_init_sources+0x3c>)
  400438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  40043a:	f013 0f01 	tst.w	r3, #1
  40043e:	d0fa      	beq.n	400436 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400440:	4b08      	ldr	r3, [pc, #32]	; (400464 <_pmc_init_sources+0x3c>)
  400442:	6a19      	ldr	r1, [r3, #32]
  400444:	4a09      	ldr	r2, [pc, #36]	; (40046c <_pmc_init_sources+0x44>)
  400446:	430a      	orrs	r2, r1
  400448:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  40044a:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  40044c:	4a08      	ldr	r2, [pc, #32]	; (400470 <_pmc_init_sources+0x48>)
  40044e:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400450:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  400452:	4a08      	ldr	r2, [pc, #32]	; (400474 <_pmc_init_sources+0x4c>)
  400454:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400456:	4b03      	ldr	r3, [pc, #12]	; (400464 <_pmc_init_sources+0x3c>)
  400458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  40045a:	f013 0f02 	tst.w	r3, #2
  40045e:	d0fa      	beq.n	400456 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400460:	4770      	bx	lr
  400462:	bf00      	nop
  400464:	400e0600 	.word	0x400e0600
  400468:	00373e01 	.word	0x00373e01
  40046c:	01370000 	.word	0x01370000
  400470:	f800ffff 	.word	0xf800ffff
  400474:	20183f01 	.word	0x20183f01

00400478 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400478:	4a11      	ldr	r2, [pc, #68]	; (4004c0 <_pmc_init_master_clock+0x48>)
  40047a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  40047c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  400480:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400482:	4b0f      	ldr	r3, [pc, #60]	; (4004c0 <_pmc_init_master_clock+0x48>)
  400484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400486:	f013 0f08 	tst.w	r3, #8
  40048a:	d0fa      	beq.n	400482 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40048c:	4a0c      	ldr	r2, [pc, #48]	; (4004c0 <_pmc_init_master_clock+0x48>)
  40048e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400498:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40049a:	4b09      	ldr	r3, [pc, #36]	; (4004c0 <_pmc_init_master_clock+0x48>)
  40049c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40049e:	f013 0f08 	tst.w	r3, #8
  4004a2:	d0fa      	beq.n	40049a <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4004a4:	4a06      	ldr	r2, [pc, #24]	; (4004c0 <_pmc_init_master_clock+0x48>)
  4004a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  4004a8:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  4004ac:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  4004b0:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4004b2:	4b03      	ldr	r3, [pc, #12]	; (4004c0 <_pmc_init_master_clock+0x48>)
  4004b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4004b6:	f013 0f08 	tst.w	r3, #8
  4004ba:	d0fa      	beq.n	4004b2 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  4004bc:	4770      	bx	lr
  4004be:	bf00      	nop
  4004c0:	400e0600 	.word	0x400e0600

004004c4 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  4004c4:	b508      	push	{r3, lr}
	_pmc_init_sources();
  4004c6:	4b02      	ldr	r3, [pc, #8]	; (4004d0 <_pmc_init+0xc>)
  4004c8:	4798      	blx	r3
	_pmc_init_master_clock();
  4004ca:	4b02      	ldr	r3, [pc, #8]	; (4004d4 <_pmc_init+0x10>)
  4004cc:	4798      	blx	r3
  4004ce:	bd08      	pop	{r3, pc}
  4004d0:	00400429 	.word	0x00400429
  4004d4:	00400479 	.word	0x00400479

004004d8 <_pwm_get_cfg>:
 */
static const struct _pwm_cfg *_pwm_get_cfg(void *const hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4004d8:	2300      	movs	r3, #0
  4004da:	b10b      	cbz	r3, 4004e0 <_pwm_get_cfg+0x8>
		if (_pwms[i].hw == hw) {
			return (_pwms + i);
		}
	}

	return NULL;
  4004dc:	2000      	movs	r0, #0
}
  4004de:	4770      	bx	lr
		if (_pwms[i].hw == hw) {
  4004e0:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
  4004e4:	008a      	lsls	r2, r1, #2
  4004e6:	4906      	ldr	r1, [pc, #24]	; (400500 <_pwm_get_cfg+0x28>)
  4004e8:	588a      	ldr	r2, [r1, r2]
  4004ea:	4282      	cmp	r2, r0
  4004ec:	d002      	beq.n	4004f4 <_pwm_get_cfg+0x1c>
	for (i = 0; i < ARRAY_SIZE(_pwms); i++) {
  4004ee:	3301      	adds	r3, #1
  4004f0:	b2db      	uxtb	r3, r3
  4004f2:	e7f2      	b.n	4004da <_pwm_get_cfg+0x2>
			return (_pwms + i);
  4004f4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  4004f8:	009a      	lsls	r2, r3, #2
  4004fa:	4608      	mov	r0, r1
  4004fc:	4410      	add	r0, r2
  4004fe:	4770      	bx	lr
  400500:	0040076c 	.word	0x0040076c

00400504 <_pwm_init_irq_param>:
/**
 * \brief Init irq param with the given pwm hardware instance
 */
static void _pwm_init_irq_param(const void *const hw, struct _pwm_device *dev)
{
	if (hw == PWM0) {
  400504:	4b03      	ldr	r3, [pc, #12]	; (400514 <_pwm_init_irq_param+0x10>)
  400506:	4298      	cmp	r0, r3
  400508:	d000      	beq.n	40050c <_pwm_init_irq_param+0x8>
  40050a:	4770      	bx	lr
		_pwm0_dev = dev;
  40050c:	4b02      	ldr	r3, [pc, #8]	; (400518 <_pwm_init_irq_param+0x14>)
  40050e:	6019      	str	r1, [r3, #0]
	}
}
  400510:	e7fb      	b.n	40050a <_pwm_init_irq_param+0x6>
  400512:	bf00      	nop
  400514:	40020000 	.word	0x40020000
  400518:	2040001c 	.word	0x2040001c

0040051c <_pwm_interrupt_handler>:
 * \internal interrupt handler for PWM
 *
 * \param[in] instance PWM instance number
 */
static void _pwm_interrupt_handler(struct _pwm_device *device)
{
  40051c:	b508      	push	{r3, lr}
	if (hri_pwm_read_ISR1_reg(device->hw)) {
  40051e:	6903      	ldr	r3, [r0, #16]
	return tmp;
}

static inline hri_pwm_isr1_reg_t hri_pwm_read_ISR1_reg(const void *const hw)
{
	return ((Pwm *)hw)->PWM_ISR1;
  400520:	69db      	ldr	r3, [r3, #28]
  400522:	b113      	cbz	r3, 40052a <_pwm_interrupt_handler+0xe>
		if (NULL != device->callback.pwm_period_cb) {
  400524:	6803      	ldr	r3, [r0, #0]
  400526:	b103      	cbz	r3, 40052a <_pwm_interrupt_handler+0xe>
			device->callback.pwm_period_cb(device);
  400528:	4798      	blx	r3
  40052a:	bd08      	pop	{r3, pc}

0040052c <PWM0_Handler>:

/**
 * \internal PWM interrupt handler
 */
void PWM0_Handler(void)
{
  40052c:	b508      	push	{r3, lr}
	_pwm_interrupt_handler(_pwm0_dev);
  40052e:	4b02      	ldr	r3, [pc, #8]	; (400538 <PWM0_Handler+0xc>)
  400530:	6818      	ldr	r0, [r3, #0]
  400532:	4b02      	ldr	r3, [pc, #8]	; (40053c <PWM0_Handler+0x10>)
  400534:	4798      	blx	r3
  400536:	bd08      	pop	{r3, pc}
  400538:	2040001c 	.word	0x2040001c
  40053c:	0040051d 	.word	0x0040051d

00400540 <_pwm_init>:
}

int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
  400540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400542:	4606      	mov	r6, r0
	ASSERT(hw);
  400544:	460c      	mov	r4, r1
  400546:	1c08      	adds	r0, r1, #0
  400548:	bf18      	it	ne
  40054a:	2001      	movne	r0, #1
  40054c:	f240 1271 	movw	r2, #369	; 0x171
  400550:	4944      	ldr	r1, [pc, #272]	; (400664 <_pwm_init+0x124>)
  400552:	4b45      	ldr	r3, [pc, #276]	; (400668 <_pwm_init+0x128>)
  400554:	4798      	blx	r3
	int8_t                      i;
	const struct _pwm_cfg *     cfg;
	const struct _pwm_ch_cfg *  ch;
	const struct _pwm_comp_cfg *comp;

	cfg = _pwm_get_cfg(hw);
  400556:	4620      	mov	r0, r4
  400558:	4b44      	ldr	r3, [pc, #272]	; (40066c <_pwm_init+0x12c>)
  40055a:	4798      	blx	r3
  40055c:	4605      	mov	r5, r0

	device->hw = hw;
  40055e:	6134      	str	r4, [r6, #16]
	/* Init PMW */
	hri_pwm_write_CLK_reg(hw, cfg->pwm_clk);
  400560:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_pwm_write_CLK_reg(const void *const hw, hri_pwm_clk_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_CLK = data;
  400562:	6023      	str	r3, [r4, #0]
	hri_pwm_write_ELMR_reg(hw, 0, cfg->pwm_elmr0);
  400564:	68c3      	ldr	r3, [r0, #12]
}

static inline void hri_pwm_write_ELMR_reg(const void *const hw, uint8_t index, hri_pwm_elmr_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ELMR[index] = data;
  400566:	67e3      	str	r3, [r4, #124]	; 0x7c
	hri_pwm_write_ELMR_reg(hw, 1, cfg->pwm_elmr1);
  400568:	6903      	ldr	r3, [r0, #16]
  40056a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	hri_pwm_write_FMR_reg(hw, cfg->pwm_fmr);
  40056e:	6943      	ldr	r3, [r0, #20]
	((Pwm *)hw)->PWM_FMR = data;
  400570:	65e3      	str	r3, [r4, #92]	; 0x5c
	hri_pwm_write_FPV1_reg(hw, cfg->pwm_fpv1);
  400572:	6983      	ldr	r3, [r0, #24]
	((Pwm *)hw)->PWM_FPV1 = data;
  400574:	66a3      	str	r3, [r4, #104]	; 0x68
	hri_pwm_write_FPV2_reg(hw, cfg->pwm_fpv2);
  400576:	69c3      	ldr	r3, [r0, #28]
}

static inline void hri_pwm_write_FPV2_reg(const void *const hw, hri_pwm_fpv2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_FPV2 = data;
  400578:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	hri_pwm_write_FPE_reg(hw, cfg->pwm_fpe);
  40057c:	6a03      	ldr	r3, [r0, #32]
	((Pwm *)hw)->PWM_FPE = data;
  40057e:	66e3      	str	r3, [r4, #108]	; 0x6c
	hri_pwm_write_ETRG1_reg(hw, cfg->pwm_etrg1);
  400580:	6a43      	ldr	r3, [r0, #36]	; 0x24
}

static inline void hri_pwm_write_ETRG1_reg(const void *const hw, hri_pwm_etrg1_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG1 = data;
  400582:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	hri_pwm_write_ETRG2_reg(hw, cfg->pwm_etrg2);
  400586:	6a83      	ldr	r3, [r0, #40]	; 0x28
}

static inline void hri_pwm_write_ETRG2_reg(const void *const hw, hri_pwm_etrg2_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ETRG2 = data;
  400588:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c

	/* Init Channel */
	for (i = 0; i < cfg->ch_num; i++) {
  40058c:	2300      	movs	r3, #0
  40058e:	e019      	b.n	4005c4 <_pwm_init+0x84>
		ch = cfg->ch + i;
  400590:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  400592:	0118      	lsls	r0, r3, #4
  400594:	eb07 0e00 	add.w	lr, r7, r0
		hri_pwm_write_CMR_reg(hw, ch->index, ch->mode);
  400598:	5c3a      	ldrb	r2, [r7, r0]
  40059a:	f8de 1004 	ldr.w	r1, [lr, #4]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CMR = data;
  40059e:	3210      	adds	r2, #16
  4005a0:	0152      	lsls	r2, r2, #5
  4005a2:	50a1      	str	r1, [r4, r2]
		hri_pwm_write_CDTY_reg(hw, ch->index, ch->duty_cycle);
  4005a4:	5c3a      	ldrb	r2, [r7, r0]
  4005a6:	f8de 100c 	ldr.w	r1, [lr, #12]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CDTY = data;
  4005aa:	3210      	adds	r2, #16
  4005ac:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4005b0:	6051      	str	r1, [r2, #4]
		hri_pwm_write_CPRD_reg(hw, ch->index, ch->period);
  4005b2:	5c3a      	ldrb	r2, [r7, r0]
  4005b4:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmChNum[submodule_index].PWM_CPRD = data;
  4005b8:	eb04 1242 	add.w	r2, r4, r2, lsl #5
  4005bc:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
	for (i = 0; i < cfg->ch_num; i++) {
  4005c0:	3301      	adds	r3, #1
  4005c2:	b25b      	sxtb	r3, r3
  4005c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4005c6:	4293      	cmp	r3, r2
  4005c8:	d3e2      	bcc.n	400590 <_pwm_init+0x50>
  4005ca:	2300      	movs	r3, #0
  4005cc:	e014      	b.n	4005f8 <_pwm_init+0xb8>
	}
	/* Init comparison */
	for (i = 0; i < cfg->comp_num; i++) {
		comp = cfg->comp + i;
  4005ce:	6ba9      	ldr	r1, [r5, #56]	; 0x38
  4005d0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4005d4:	0082      	lsls	r2, r0, #2
  4005d6:	eb01 0e02 	add.w	lr, r1, r2
		hri_pwm_write_CMPM_reg(hw, comp->index, comp->comp_cmpm);
  4005da:	5c88      	ldrb	r0, [r1, r2]
  4005dc:	f8de 7004 	ldr.w	r7, [lr, #4]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPM = data;
  4005e0:	eb04 1000 	add.w	r0, r4, r0, lsl #4
  4005e4:	f8c0 7138 	str.w	r7, [r0, #312]	; 0x138
		hri_pwm_write_CMPV_reg(hw, comp->index, comp->comp_cmpv);
  4005e8:	5c8a      	ldrb	r2, [r1, r2]
  4005ea:	f8de 1008 	ldr.w	r1, [lr, #8]
	((Pwm *)hw)->PwmCmp[submodule_index].PWM_CMPV = data;
  4005ee:	3213      	adds	r2, #19
  4005f0:	0112      	lsls	r2, r2, #4
  4005f2:	50a1      	str	r1, [r4, r2]
	for (i = 0; i < cfg->comp_num; i++) {
  4005f4:	3301      	adds	r3, #1
  4005f6:	b25b      	sxtb	r3, r3
  4005f8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  4005fa:	4293      	cmp	r3, r2
  4005fc:	d3e7      	bcc.n	4005ce <_pwm_init+0x8e>
	}

	_pwm_init_irq_param(hw, device);
  4005fe:	4631      	mov	r1, r6
  400600:	4620      	mov	r0, r4
  400602:	4b1b      	ldr	r3, [pc, #108]	; (400670 <_pwm_init+0x130>)
  400604:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  400606:	f995 3004 	ldrsb.w	r3, [r5, #4]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  40060a:	2b00      	cmp	r3, #0
  40060c:	db0d      	blt.n	40062a <_pwm_init+0xea>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40060e:	095a      	lsrs	r2, r3, #5
  400610:	f003 031f 	and.w	r3, r3, #31
  400614:	2101      	movs	r1, #1
  400616:	fa01 f303 	lsl.w	r3, r1, r3
  40061a:	3220      	adds	r2, #32
  40061c:	4915      	ldr	r1, [pc, #84]	; (400674 <_pwm_init+0x134>)
  40061e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400622:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400626:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  40062a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  40062e:	2b00      	cmp	r3, #0
  400630:	db09      	blt.n	400646 <_pwm_init+0x106>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400632:	095a      	lsrs	r2, r3, #5
  400634:	f003 031f 	and.w	r3, r3, #31
  400638:	2101      	movs	r1, #1
  40063a:	fa01 f303 	lsl.w	r3, r1, r3
  40063e:	3260      	adds	r2, #96	; 0x60
  400640:	490c      	ldr	r1, [pc, #48]	; (400674 <_pwm_init+0x134>)
  400642:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  400646:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40064a:	2b00      	cmp	r3, #0
  40064c:	db08      	blt.n	400660 <_pwm_init+0x120>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40064e:	0959      	lsrs	r1, r3, #5
  400650:	f003 031f 	and.w	r3, r3, #31
  400654:	2201      	movs	r2, #1
  400656:	fa02 f303 	lsl.w	r3, r2, r3
  40065a:	4a06      	ldr	r2, [pc, #24]	; (400674 <_pwm_init+0x134>)
  40065c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return ERR_NONE;
}
  400660:	2000      	movs	r0, #0
  400662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400664:	004007e8 	.word	0x004007e8
  400668:	004003cd 	.word	0x004003cd
  40066c:	004004d9 	.word	0x004004d9
  400670:	00400505 	.word	0x00400505
  400674:	e000e100 	.word	0xe000e100

00400678 <_pwm_enable>:

	hri_pwm_write_DIS_reg(device->hw, PWM_DIS_MASK);
}

void _pwm_enable(struct _pwm_device *const device)
{
  400678:	b538      	push	{r3, r4, r5, lr}
	ASSERT(device);
  40067a:	4604      	mov	r4, r0
  40067c:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  400680:	490b      	ldr	r1, [pc, #44]	; (4006b0 <_pwm_enable+0x38>)
  400682:	3000      	adds	r0, #0
  400684:	bf18      	it	ne
  400686:	2001      	movne	r0, #1
  400688:	4b0a      	ldr	r3, [pc, #40]	; (4006b4 <_pwm_enable+0x3c>)
  40068a:	4798      	blx	r3
	int8_t                 i;
	const struct _pwm_cfg *cfg;

	cfg = _pwm_get_cfg(device->hw);
  40068c:	6920      	ldr	r0, [r4, #16]
  40068e:	4b0a      	ldr	r3, [pc, #40]	; (4006b8 <_pwm_enable+0x40>)
  400690:	4798      	blx	r3

	for (i = 0; i < cfg->ch_num; i++) {
  400692:	2300      	movs	r3, #0
  400694:	e008      	b.n	4006a8 <_pwm_enable+0x30>
		hri_pwm_write_ENA_reg(device->hw, 0x1u << cfg->ch[i].index);
  400696:	6921      	ldr	r1, [r4, #16]
  400698:	6b05      	ldr	r5, [r0, #48]	; 0x30
  40069a:	011a      	lsls	r2, r3, #4
  40069c:	5cad      	ldrb	r5, [r5, r2]
  40069e:	2201      	movs	r2, #1
  4006a0:	40aa      	lsls	r2, r5
}

static inline void hri_pwm_write_ENA_reg(const void *const hw, hri_pwm_ena_reg_t data)
{
	PWM_CRITICAL_SECTION_ENTER();
	((Pwm *)hw)->PWM_ENA = data;
  4006a2:	604a      	str	r2, [r1, #4]
	for (i = 0; i < cfg->ch_num; i++) {
  4006a4:	3301      	adds	r3, #1
  4006a6:	b25b      	sxtb	r3, r3
  4006a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4006aa:	4293      	cmp	r3, r2
  4006ac:	d3f3      	bcc.n	400696 <_pwm_enable+0x1e>
	}
}
  4006ae:	bd38      	pop	{r3, r4, r5, pc}
  4006b0:	004007e8 	.word	0x004007e8
  4006b4:	004003cd 	.word	0x004003cd
  4006b8:	004004d9 	.word	0x004004d9

004006bc <_pwm_is_enabled>:
		hri_pwm_write_CPRDUPD_reg(device->hw, cfg->ch[i].index, period);
	}
}

bool _pwm_is_enabled(const struct _pwm_device *const device)
{
  4006bc:	b510      	push	{r4, lr}
	ASSERT(device);
  4006be:	4604      	mov	r4, r0
  4006c0:	f240 12d1 	movw	r2, #465	; 0x1d1
  4006c4:	4907      	ldr	r1, [pc, #28]	; (4006e4 <_pwm_is_enabled+0x28>)
  4006c6:	3000      	adds	r0, #0
  4006c8:	bf18      	it	ne
  4006ca:	2001      	movne	r0, #1
  4006cc:	4b06      	ldr	r3, [pc, #24]	; (4006e8 <_pwm_is_enabled+0x2c>)
  4006ce:	4798      	blx	r3
	uint8_t status = hri_pwm_get_SR_reg(device->hw, 0x0F);
  4006d0:	6923      	ldr	r3, [r4, #16]
	tmp = ((Pwm *)hw)->PWM_SR;
  4006d2:	68db      	ldr	r3, [r3, #12]
	if (status == 0) {
  4006d4:	f013 0f0f 	tst.w	r3, #15
  4006d8:	d001      	beq.n	4006de <_pwm_is_enabled+0x22>
		return false;
	} else {
		return true;
  4006da:	2001      	movs	r0, #1
	}
}
  4006dc:	bd10      	pop	{r4, pc}
		return false;
  4006de:	2000      	movs	r0, #0
  4006e0:	bd10      	pop	{r4, pc}
  4006e2:	bf00      	nop
  4006e4:	004007e8 	.word	0x004007e8
  4006e8:	004003cd 	.word	0x004003cd

004006ec <_pwm_get_pwm>:
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_pwm_get_pwm(void)
{
	return NULL;
}
  4006ec:	2000      	movs	r0, #0
  4006ee:	4770      	bx	lr

004006f0 <main>:
#include <atmel_start.h>

#define PWM_FREQUENCY 25000000
#define PWM_PERIOD PWM_FREQUENCY/2
int main(void)
{
  4006f0:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  4006f2:	4b03      	ldr	r3, [pc, #12]	; (400700 <main+0x10>)
  4006f4:	4798      	blx	r3
	pwm_enable(&PWM_0);
  4006f6:	4803      	ldr	r0, [pc, #12]	; (400704 <main+0x14>)
  4006f8:	4b03      	ldr	r3, [pc, #12]	; (400708 <main+0x18>)
  4006fa:	4798      	blx	r3
  4006fc:	e7fe      	b.n	4006fc <main+0xc>
  4006fe:	bf00      	nop
  400700:	004001c1 	.word	0x004001c1
  400704:	2040002c 	.word	0x2040002c
  400708:	00400391 	.word	0x00400391

0040070c <__libc_init_array>:
  40070c:	b570      	push	{r4, r5, r6, lr}
  40070e:	4e0d      	ldr	r6, [pc, #52]	; (400744 <__libc_init_array+0x38>)
  400710:	4c0d      	ldr	r4, [pc, #52]	; (400748 <__libc_init_array+0x3c>)
  400712:	1ba4      	subs	r4, r4, r6
  400714:	10a4      	asrs	r4, r4, #2
  400716:	2500      	movs	r5, #0
  400718:	42a5      	cmp	r5, r4
  40071a:	d109      	bne.n	400730 <__libc_init_array+0x24>
  40071c:	4e0b      	ldr	r6, [pc, #44]	; (40074c <__libc_init_array+0x40>)
  40071e:	4c0c      	ldr	r4, [pc, #48]	; (400750 <__libc_init_array+0x44>)
  400720:	f000 f86e 	bl	400800 <_init>
  400724:	1ba4      	subs	r4, r4, r6
  400726:	10a4      	asrs	r4, r4, #2
  400728:	2500      	movs	r5, #0
  40072a:	42a5      	cmp	r5, r4
  40072c:	d105      	bne.n	40073a <__libc_init_array+0x2e>
  40072e:	bd70      	pop	{r4, r5, r6, pc}
  400730:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  400734:	4798      	blx	r3
  400736:	3501      	adds	r5, #1
  400738:	e7ee      	b.n	400718 <__libc_init_array+0xc>
  40073a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40073e:	4798      	blx	r3
  400740:	3501      	adds	r5, #1
  400742:	e7f2      	b.n	40072a <__libc_init_array+0x1e>
  400744:	0040080c 	.word	0x0040080c
  400748:	0040080c 	.word	0x0040080c
  40074c:	0040080c 	.word	0x0040080c
  400750:	00400810 	.word	0x00400810
  400754:	682f2e2e 	.word	0x682f2e2e
  400758:	732f6c61 	.word	0x732f6c61
  40075c:	682f6372 	.word	0x682f6372
  400760:	705f6c61 	.word	0x705f6c61
  400764:	632e6d77 	.word	0x632e6d77
  400768:	00000000 	.word	0x00000000

0040076c <_pwms>:
  40076c:	40020000 0000001f 00010001 00000001     ...@............
  40077c:	00000001 000000ff 00000000 00000004     ................
	...
  400798:	00000004 004007a8 00000000 20400020     ......@..... .@ 

004007a8 <_ch_cfg0>:
  4007a8:	00000000 00000200 00000006 00000003     ................
  4007b8:	00000001 00000000 00000400 00000200     ................
  4007c8:	00000002 00000000 00000400 00000200     ................
  4007d8:	00000003 00000000 0000000a 00000005     ................
  4007e8:	682f2e2e 702f6c70 682f6d77 705f6c70     ../hpl/pwm/hpl_p
  4007f8:	632e6d77 00000000                       wm.c....

00400800 <_init>:
  400800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400802:	bf00      	nop
  400804:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400806:	bc08      	pop	{r3}
  400808:	469e      	mov	lr, r3
  40080a:	4770      	bx	lr

0040080c <__init_array_start>:
  40080c:	00400179 	.word	0x00400179

00400810 <_fini>:
  400810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400812:	bf00      	nop
  400814:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400816:	bc08      	pop	{r3}
  400818:	469e      	mov	lr, r3
  40081a:	4770      	bx	lr

0040081c <__fini_array_start>:
  40081c:	00400155 	.word	0x00400155
